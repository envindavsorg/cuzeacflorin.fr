import { promises as fs } from 'node:fs';
import path from 'node:path';
import { rimraf } from 'rimraf';
import { type Registry, registrySchema } from 'shadcn/schema';
import consola from "consola";
// @ts-ignore
const { registryConfig } = await import('@/config/registry.js');
// @ts-ignore
const { registry } = await import('@/registry');

const REGISTRY_PATH = path.join(process.cwd(), 'src/__registry__');
const PUBLIC_REGISTRY_PATH = path.join(process.cwd(), 'public/r');

export const buildRegistry = async (registry: Registry) => {
	let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import React from "react";

export const Index: Record<string, any> = {`;
	for (const item of registry.items) {
		if (!(Array.isArray(item.files) && item.files?.length)) {
			continue;
		}

		const componentPath = `@/registry/${item.files[0].path}`;

		index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ''}",
    type: "${item.type}",
    files: [${item.files.map((file) => {
			const filePath = `src/registry/${file.path}`;
			return `{
      path: "${filePath}",
      type: "${file.type}",
    }`;
		})}],${
			item.type === 'registry:example'
				? `
    component: React.lazy(() => import("${componentPath}")),`
				: ''
		}
  },`;
	}

	index += `
}`;

	// Build /src/__registry__/registry.autogenerated.json
	let registryJSON = JSON.stringify(
		{
			$schema: 'https://ui.shadcn.com/schema/registry.json',
			name: 'envindavsorg',
			homepage: 'https://cuzeacflorin.fr/components',
			items: registry.items
				.filter((item) => item.type !== 'registry:example')
				.map((item) => ({
					...item,
					files:
						item.files?.map((file) => {
							if (file.path.startsWith('src/')) {
								return file;
							}

							return {
								...file,
								path: `src/registry/${file.path}`,
							};
						}) ?? [],
				})),
		},
		null,
		2
	);

	const registryBaseUrl = registryConfig.baseUrl;
	const registryBaseUrlRegex = /<registryBaseUrl>/g;
	registryJSON = registryJSON.replace(registryBaseUrlRegex, registryBaseUrl);

	rimraf.sync(path.join(REGISTRY_PATH, 'registry.autogenerated.json'));
	await fs.writeFile(
		path.join(REGISTRY_PATH, 'registry.autogenerated.json'),
		registryJSON,
		'utf8'
	);

	// Build public registry
	rimraf.sync(path.join(PUBLIC_REGISTRY_PATH, 'registry.json'));
	await fs.writeFile(
		path.join(PUBLIC_REGISTRY_PATH, 'registry.json'),
		registryJSON,
		'utf8'
	);

	// Build /src/__registry__/index.tsx
	rimraf.sync(path.join(REGISTRY_PATH, 'index.tsx'));
	await fs.writeFile(path.join(REGISTRY_PATH, 'index.tsx'), index, 'utf8');
};

try {
	consola.info('Building registry ...');

	const result = registrySchema.safeParse(registry);

	if (!result.success) {
		consola.error(result.error);
		process.exit(1);
	}

	await buildRegistry(result.data);

	consola.success('Registry built successfully !');
} catch (error) {
	consola.error(error);
	
	process.exit(1);
}
